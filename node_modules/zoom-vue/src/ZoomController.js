// Zoom
import ZoomVideo from '@zoom/videosdk'
import createToken from './utils/JWT'
const ZoomController = {
    zoomClient: null,
    jid: null,
    name: null,
    zoomId: null,
    messageId: null,
    isModerator: null,
    appId: null,
    initZoom: function(){
        const client = ZoomVideo.createClient()
        client.init('en-US', 'CDN')
        ZoomController.zoomClient = client;
    },
    joinConference: function(jid, name, zoomId, messageId, isModerator, sdkKey, sdkSecret, appId){
        ZoomController.jid = jid
        ZoomController.name = name
        ZoomController.zoomId = zoomId
        ZoomController.messageId = messageId
        ZoomController.isModerator = isModerator
        ZoomController.appId = appId
        return new Promise(async(resolve,reject)=>{
            let token = await createToken(zoomId, (isModerator==true)?1:0, sdkKey, sdkSecret);
            ZoomController.zoomClient.join(zoomId, token, name).then(()=>{
                ZoomController.zoomClient.getMediaStream().startAudio();
                resolve(true)
            }).catch((error)=>{
                resolve(false)
            });
        });
    },
    closeConference: function(jid, messageId){
        return new Promise(async(resolve)=>{
            try {
                if(ZoomController.jid == jid || ZoomController.messageId == messageId){
                    await ZoomController.zoomClient.leave(false)
                    resolve(true)
                }
            } catch (error) {
                console.log("endConference",error)
                resolve(false)
            }
        });
    },
    toggleMuteShareAudio(isSharingAudio){
        return new Promise(async(resolve,reject)=>{
            try {
                if(isSharingAudio){
                    await ZoomController.zoomClient.getMediaStream().muteShareAudio();
                }else{
                    await ZoomController.zoomClient.getMediaStream().unmuteShareAudio();
                }
                resolve(true)
            } catch (error) {
                resolve(false)
            }
        });
    },
    toggleAudio: function(muteShareAudioByUser = false){
        return new Promise(async(resolve)=>{
            try {
                const isMute = await ZoomController.zoomClient.getMediaStream().isAudioMuted();
                if(isMute){
                    await ZoomController.zoomClient.getMediaStream().muteShareAudio().catch(()=>{});
                    await ZoomController.zoomClient.getMediaStream().unmuteAudio();
                }else{
                    if(muteShareAudioByUser == false){
                        await ZoomController.zoomClient.getMediaStream().unmuteShareAudio().catch(()=>{});
                    }
                    await ZoomController.zoomClient.getMediaStream().muteAudio();
                }
                resolve(true)
            } catch (error) {
                console.log("toggleAudio", error)
                resolve(false)
            }
        });
    },
    toggleVideo: function(forceMute = false){
        return new Promise(async(resolve)=>{
            try {
                console.log("toggleVideo-check",forceMute)
                if(forceMute){
                    await ZoomController.zoomClient.getMediaStream().stopVideo();
                }else{
                    const isVideo = await ZoomController.zoomClient.getMediaStream().isCapturingVideo();
                    if(isVideo){
                        await ZoomController.zoomClient.getMediaStream().stopVideo();
                    }else{
                        await ZoomController.zoomClient.getMediaStream().startVideo({hd:false})
                    }
                }
                resolve(true)
            } catch (error) {
                console.log("videotoggle-error", error)
                resolve(false)
            }
        });
    },
    sendCommand: function(cmd){
        ZoomController.zoomClient.getCommandClient().send(cmd)
    },
    endConference: function(end= false){
        return new Promise(async(resolve)=>{
            try {
                await ZoomController.zoomClient.leave(end)
                resolve(true)
            } catch (error) {
                console.log("endConference",error)
                resolve(false)
            }
        });
    }
}

export default ZoomController
