const sqlite3 = window.require('sqlite3').verbose();
const electronRemote = window.require('@electron/remote')
const db = new sqlite3.Database(electronRemote.app.getAppPath().replace("app.asar","dictionary.db"));
// const db = new sqlite3.Database("./assets/db/dictionary.db");
import Store from '../store/index'
const DictionaryController = {
    chounnatLexicalCache: [],
    khmerDictionaryCache:[],
    chounnatLexical: [],
    khmerDictionary:[],
    partOfSpeechMap: new Map([['កិ',"កិរិយាសព្ទ"],["កិនុ","កិរិយានុគ្រោះ"],["កិវិ","កិរិយាវិសេសន៍"],
    ["គុ","គុណសព្ទ"],["ន","នាមសព្ទ"],["និ","និបាតសព្ទ"],
    ["និស","និបាតសព្ទជាសន្ធាន"],["ប","បរិវារសព្ទ"],["បសំ","បុរណសំខ្យា"],
    ["បុ","បុរិសសព្វនាម"],["បូសំ","បកតិសំខ្យា"],["វិស","វិសេសនសព្វនាម"],
    ["សព្វ","សព្វនាម"],["សំខ្យា","សំខ្យាសព្វ"],["សំខ្យានុ","សំខ្យានុគ្រោះ"],
    ["អានិ","អាយតនិបាត"],["អាល","អាល"],["ឧ","ឧទានសព្ទ"]]),
    khmerNumbers: ["០","១","២","៣","៤","៥","៦","៧","៨","៩"],
    englishNumbers: ["0","1","2","3","4","5","6","7","8","9"],
    query: function(){
        try{
            if(this.chounnatLexicalCache.length <= 0){
                let sql = `SELECT *from lexicalentry GROUP BY writtenForm ORDER BY writtenForm`;
                db.all(sql, [], (err, rows) => {
                    if (err) {
                        throw err;
                    }
                    rows.forEach((row) => {
                        DictionaryController.chounnatLexicalCache.push(row);
                    });
                    Store.commit('setChounNatLexical', this.chounnatLexicalCache);
                });
            }
            if(this.khmerDictionaryCache.length <= 0){
                let sql2 = `SELECT *from khmerdictionary WHERE t_main!=''`;
                db.all(sql2, [], (err, rows) => {
                    if (err) {
                        throw err;
                    }
                    rows.forEach((row) => {
                        DictionaryController.khmerDictionaryCache.push(row);
                    });
                    Store.commit('setKhmerDictionary', this.khmerDictionaryCache);
                });
            }
            // db.close();
        }catch (error) {
            console.log("query",error)
        }
    },
    onSearch: function(word){
        this.chounnatLexical = this.chounnatLexicalCache.filter(function(lexical){
            return lexical.writtenForm.startsWith(word)
        })
        Store.commit('setChounNatLexical', this.chounnatLexical)
        this.khmerDictionary = this.khmerDictionaryCache.filter(function(lexical){
            return lexical.t_main.startsWith(word)
        })
        Store.commit('setKhmerDictionary', this.khmerDictionary)
    },
    onOpenChounNatDetail: async function(writtenForm){
        return new Promise(function(resolve){
            try {
                let sql = `SELECT *from sense INNER JOIN lexicalentry ON lexicalentry.id=sense.lexicalEntryId INNER JOIN synset ON sense.synsetid=synset.id INNER JOIN statement ON synset.id = statement.synsetId WHERE lexicalentry.writtenForm='${writtenForm}'`;
                db.all(sql, [], (err, rows) => {
                  if (err) {
                    throw err;
                  }
                  resolve(rows);
                });
            } catch (error) {
                console.log("onOpenChounNatDetail",error)
                resolve(null)
            }
        });
    },
    onOpenKhmerDictionaryDetail: function(id){
        return new Promise(function(resolve){
            try {
                const sql = `SELECT *FROM khmerdictionary WHERE t_ref='${id}'`;
                db.all(sql, [], (err, rows) => {
                  if (err) {
                    throw err;
                  }
                  resolve(rows);
                })
            } catch (error) {
                resolve(null)
            }
        });
    },
    getFullPathOfSpeech: function(value){
        return this.partOfSpeechMap.get(value)
    },
    getKhmerNumber: function(value){
        for(const n in this.englishNumbers){
            value = value.replace(this.englishNumbers[n],this.khmerNumbers[n])
        }
        return value
    }
};

export default DictionaryController