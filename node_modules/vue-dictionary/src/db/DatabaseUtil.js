const DatabaseUtil = {
    DictionaryBookmark: "dictionary_bookmarks",
    MODE: {
        READ_ONLY: "readonly",
        READ_WRITE: "readwrite"
    },
    initDB: function(callback){
        // connect database
        let openRequest = indexedDB.open('dictionary', 1);
        openRequest.onupgradeneeded = function (e) {
            DatabaseUtil.db = e.target.result;
            if(!DatabaseUtil.db.objectStoreNames.contains(DatabaseUtil.DictionaryBookmark)){
                let bookmark = DatabaseUtil.db.createObjectStore(DatabaseUtil.DictionaryBookmark, { keyPath: 'content_id' });
                bookmark.createIndex('content', 'content', { unique: false });
            }
        };
        openRequest.onsuccess = function (e) {
            DatabaseUtil.db = e.target.result;
            if(callback){
                callback();
            }
        };
        openRequest.onerror = function () {
            alert("open dictionary bookmark error.")
        };
    },
    getObjectStore: function (store_name, mode) {
        let tx = DatabaseUtil.db.transaction(store_name, mode);
        return tx.objectStore(store_name);
    },
    getBookmark: function(query){
        return new Promise((resolve)=>{
           try {
                let store = DatabaseUtil.getObjectStore(DatabaseUtil.DictionaryBookmark, DatabaseUtil.MODE.READ_ONLY)
                store.get(query).onsuccess = function (event) {
                    let bookmark = event.target.result
                    resolve(bookmark);
                }
           } catch (error) {
                console.log("getBookmark",error)
                resolve(null)
           } 
        });
    },
    getAllBookmark: function(){
        return new Promise((resolve)=>{
           try {
                let store = DatabaseUtil.db.transaction([DatabaseUtil.DictionaryBookmark], DatabaseUtil.MODE.READ_ONLY).objectStore(DatabaseUtil.DictionaryBookmark);
                store.getAll().onsuccess = function (e) {
                    resolve(e.target.result);
                }
           } catch (error) {
                resolve([]);
           } 
        });
    },
    insertBookmark: function(bookmark){
        return new Promise(function(resolve){
           try {
                let store = DatabaseUtil.getObjectStore(DatabaseUtil.DictionaryBookmark, DatabaseUtil.MODE.READ_WRITE)
                store.add(bookmark).onsuccess = function (event) {
                    let bookmark = event.target.result
                    resolve(bookmark);
                }
           } catch (error) {
                console.log("insertBookmark-error",error)
                resolve(null)
           } 
        });
    },
    deleteBookmark: function(contentId){
        return new Promise(function(resolve){
           try {
                let store = DatabaseUtil.getObjectStore(DatabaseUtil.DictionaryBookmark, DatabaseUtil.MODE.READ_WRITE)
                store.delete(contentId).onsuccess = function (event) {
                    let bookmark = event.target.result
                    resolve(bookmark);
                }
           } catch (error) {
                resolve(null)
           } 
        });
    }
}

export default DatabaseUtil