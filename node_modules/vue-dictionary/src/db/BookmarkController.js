import DatabaseUtil from './DatabaseUtil'; 
import Store from '../store/index'
const BookmarkController = {
    bookmarkList:[],
    query: async function(){
        try {
            const bookmarkList = await DatabaseUtil.getAllBookmark();
            //sort
            BookmarkController.bookmarkList = bookmarkList.sort(function(a,b){
                return a.content - b.content;
            });
            Store.commit('setBookmarkList', BookmarkController.bookmarkList);
        } catch (error) {
            console.log("query",error)
        }
    },
    isBookmark: function(contentId){
        return new Promise(function(resolve){
            try {
                DatabaseUtil.getBookmark(contentId).then((bookmark) => {
                    resolve(bookmark != null);
                }).catch((error) => {
                    console.log("isBookmark",error)
                    resolve(false);
                });
            } catch (error) {
                console.log("isBookmark",error)
                resolve(false);
            }
        });
    },
    toggleBookmark: async function(data, callback){
        try {
            data = data[0] ? data[0] : data;
            let contentId = '';
            let dictionaryName = '';
            let content = '';
            let subscript = '';
            if(data.writtenForm != undefined && data.writtenForm != null){
                contentId = data.writtenForm;
                dictionaryName = 'chounnat';
                content = data.writtenForm;
                subscript = null;
            }else{
                contentId = data.t_id;
                dictionaryName = 'khmerdictionary'
                if(data.t_subword != undefined && data.t_subword != null && data.t_subword != ''){
                    content = data.t_subword;
                }else{
                    content = data.t_main;
                }
                subscript = data.t_subscrip;
            }
            let bookmark = await DatabaseUtil.getBookmark(contentId);
            if(bookmark == null || bookmark == undefined){
                let bm = {
                    content_id: contentId,
                    content: content,
                    subscript: subscript,
                    dictionaryName: dictionaryName,
                    timestamp: new Date().getTime()
                }
                await DatabaseUtil.insertBookmark(bm);
                if(callback){
                    callback(true)
                }
            }else{
                DatabaseUtil.deleteBookmark(contentId);
                //remove from list
                BookmarkController.bookmarkList = BookmarkController.bookmarkList.filter(function(bookmark){
                    return bookmark.content_id != contentId;
                })
                Store.commit('setBookmarkList', BookmarkController.bookmarkList);
                if(callback){
                    callback(false)
                }
            }
        } catch (error) {
            console.log("toggleBookmark",error)
            if(callback){
                callback(false)
            }
        } 
    },
    onSearchBookmark: async function(word){
        try {
            const bookmarks = BookmarkController.bookmarkList.filter(function(bookmark){
                return bookmark.content.startsWith(word); 
            }).sort(function(a,b){
                return b.content - a.content;
            });
            Store.commit('setBookmarkList', bookmarks);
        } catch (error) {
            console.log("onSearchBookmark",error)
        }
    }
};

export default BookmarkController;